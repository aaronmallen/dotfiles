#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'
require 'fileutils'

gemfile do
  source 'https://rubygems.org'
  gem 'dry-cli', '~> 1.1'
  gem 'sai', '~> 0.4'
end

module ManageAlias
  CONFIG_HOME = ENV.fetch('XDG_CONFIG_HOME', "#{Dir.home}/.config").freeze
  VERSION = '0.1.0'

  Sai.register(:success, [36, 161, 110])
  Sai.register(:info, [0, 170, 202])
  Sai.register(:warn, [239, 164, 50])

  class << self
    def store
      @store ||= AliasStore.new
    end
  end

  class Alias
    attr_reader :command
    attr_reader :description
    attr_reader :name
    attr_reader :topic

    class << self
      def from_alias_string(alias_string, topic: 'system')
        if alias_string =~ /^alias\s+(\S+)=(['"])(.*?)\2(?:\s+#\s*(.+))?$/
          attributes = {
            command:     Regexp.last_match(3),
            description: Regexp.last_match(4),
            name:        Regexp.last_match(1),
            topic:,
          }.compact
          new(**attributes)
        else
          nil
        end
      end
    end

    def initialize(command:, name:, description: nil, topic: 'system')
      @command     = command
      @description = description
      @name        = name
      @topic       = topic
    end

    def file_path
      File.join(CONFIG_HOME, topic, 'aliases.sh')
    end

    def to_s
      description_string = description ? " # #{description}" : ''
      "alias #{name}='#{command}'#{description_string}\n"
    end
  end

  class AliasStore
    include Enumerable

    def initialize
      @changes = []
      @entries = Dir.glob(File.join(CONFIG_HOME, '**', 'aliases.sh')).flat_map do |file|
        topic = File.dirname(file).split('/').last

        File.readlines(file).filter_map do |line|
          next unless line =~ /^\s*alias /

          Alias.from_alias_string(line.lstrip.chomp, topic:)
        end
      end.sort_by(&:name)
    end

    def add(entry)
      @entries << entry
      @changes << entry.topic
      self
    end

    def commit
      topics = @changes.uniq.sort

      topics.each do |topic|
        content = for_topic(topic).sort_by(&:name).map(&:to_s).join
        file_path = File.join(CONFIG_HOME, topic, 'aliases.sh')
        FileUtils.mkdir_p(File.dirname(file_path))
        File.write(file_path, "#{content}\n")
        system "source #{file_path}"
      end

      @changes.clear
      self
    end

    def each(&)
      return enum_for(:each) unless block_given?

      @entries.each(&)
      self
    end

    def exist?(name)
      !find(name:).nil?
    end

    def find(**attributes)
      @entries.find do |entry|
        attributes.all? { |key, value| entry.public_send(key) == value }
      end
    end

    def for_topic(topic)
      @entries.select { |entry| entry.topic == topic }
    end

    def remove(alias_name)
      found = @entries.find { |entry| entry.name == alias_name }
      return unless found

      @changes << found.topic
      @entries.delete(found)
      found
    end

    private

    def initialize_store

      @entries = @entries.sort_by(&:name)
    end
  end

  module Dry
    module CLI
      module Extension
        module Example
          def examples
            max_length = @examples.map { |usage, _| usage.length }.max

            @examples.map do |usage, description|
              indent = description ? ' ' * (max_length - usage.length + 5) : ''
              desc_string = description ? "#{indent}# #{description}" : ''
              "#{usage}#{desc_string}"
            end
          end

          def example(usage, description = nil)
            @examples << [usage, description]
          end
        end
      end
    end
  end

  module TTY
    module Helpers
      protected

      def confirm(message)
        affirmative = %w[y yes]
        negative = %w[n no]

        puts "#{message} (#{Sai.info.bold.decorate('y')}/#{Sai.info.bold.decorate('n')})"
        answer = $stdin.gets.chomp

        unless (affirmative + negative).include?(answer.downcase)
          warn "please enter #{Sai.info.bold.decorate('y')} for yes or #{Sai.info.bold.decorate('n')} for no"
          confirm(message)
        end

        affirmative.include?(answer.downcase)
      end

      def prompt(message, allow_empty: true)
        puts message
        answer = $stdin.gets.chomp

        if answer.empty? && !allow_empty
          warn 'please enter a value'
          prompt(message, allow_empty:)
        else
          answer
        end
      end
    end
  end

  module CLI
    module Commands
      extend ::Dry::CLI::Registry

      class Base < ::Dry::CLI::Command
        extend  Dry::CLI::Extension::Example
        include TTY::Helpers
      end

      class Add < Base
        desc 'Add an alias'

        argument :name, required: true, desc: 'The name of the alias'
        argument :command, required: true, desc: 'The command to alias'

        option :topic, desc: 'The topic to add the alias to'
        option :description, desc: 'The alias description'

        example 'cat bat',
                'alias the command bat to cat'
        example 'cat bat --topic bat',
                'alias the command bat to cat in the topic bat'
        example 'cat bat --description "override the default cat command with bat"',
                'alias the command bat to cat with a description'
        example 'cat bat --description "override the default cat command with bat" --topic bat',
                'alias the command bat to cat in the topic bat with a description'

        def call(name:, command:, topic: nil, description: nil, **)
          overriding = false
          (confirm_override(name) ? overriding = true : exit(0)) if ManageAlias.store.exist?(name)

          description ||= confirm_empty_description
          topic       ||= confirm_empty_topic

          subject = Alias.new(command:, name:, description:, topic:)

          ManageAlias.store.remove(name) if overriding
          ManageAlias.store.add(subject)
          ManageAlias.store.commit

          print_success(subject)
        end

        private

        def confirm_empty_description
          return unless confirm "would you like to add a description?"

          prompt "please enter a description..."
        end

        def confirm_empty_topic
          warn Sai.warn.decorate('this alias will be added to system aliases unless you specify a topic')
          return 'system' unless confirm 'would you like to add a topic?'

          prompt 'please enter a topic...', allow_empty: false
        end

        def confirm_override(name)
          warn "#{Sai.warn.decorate('alias')} #{Sai.warn.bold.decorate(name)} #{Sai.warn.decorate('already exists')}\n"
          confirm('override?')
        end

        def print_success(subject)
          puts [
                  Sai.success.bold.decorate('`'),
                  Sai.info.decorate(subject.name),
                  Sai.success.bold.decorate('` added to `'),
                  Sai.info.decorate(subject.topic),
                  Sai.success.bold.decorate('` at '),
                  Sai.info.decorate(subject.file_path),
                  "\n"
              ].join
        end
      end

      class Info < Base
        desc 'Show information about an alias'

        argument :name, required: true, desc: 'The name of the alias to show information about'

        example 'cat', 'show information about the cat alias'

        def call(name:, **)
          subject = ManageAlias.store.find(name: name)
          return not_found(name) unless subject

          puts  "#{Sai.info.bold.decorate('name')}     #{Sai.bright_white.decorate(subject.name)}\n" \
                "#{Sai.info.bold.decorate('command')}  #{Sai.bright_white.decorate(subject.command)}\n" \
                "#{Sai.info.bold.decorate('desc')}     #{Sai.bright_black.italic.decorate(subject.description)}\n" \
                "#{Sai.info.bold.decorate('topic')}    #{Sai.bright_white.decorate(subject.topic)}\n" \
                "#{Sai.info.bold.decorate('file')}     #{Sai.bright_white.decorate(subject.file_path)}\n\n"
        end

        private

        def not_found(name)
          warn "#{Sai.warn.decorate('alias')} #{Sai.warn.bold.decorate(name)} #{Sai.warn.decorate("doesn't exist")}"
          exit 1
        end
      end

      class List < Base
        desc 'List all aliases'

        option :topic, desc: 'Filter aliases by topic'

        example '', 'list all aliases'
        example '--topic system', 'list all system aliases'

        def call(topic: nil, **)
          aliases = topic ? ManageAlias.store.for_topic(topic) : ManageAlias.store
          build_list(aliases).each { |line| puts line }
        end

        private

        def build_list(aliases)
          max_length = aliases.map { |a| a.name.length }.max + 5

          aliases.map do |a|
            indent = ' ' * (max_length - a.name.length)
            description_string = if a.description
                                    "#{indent}#{Sai.italic.bright_black.decorate("# #{a.description}")}"
                                  else
                                    ''
                                  end
            "#{Sai.bold.decorate(a.name)}#{description_string}\n"
          end
        end
      end

      class Remove < Base
        desc 'Remove an alias'

        argument :name, required: true, desc: 'The name of the alias to remove'

        example 'cat', 'remove the cat alias'

        def call(name:, **)
          exit(0) unless confirm "are you sure you want to remove #{Sai.warn.bold.decorate(name)}?"

          ManageAlias.store.remove(name)
          ManageAlias.store.commit
        end
      end

      class Version < Base
        desc 'Show version number and quit'

        def call(*)
          puts "v#{VERSION}"
        end
      end

      register 'add', Add
      register 'info', Info, aliases: %w[i]
      register 'list', List, aliases: %w[l ls]
      register 'remove', Remove, aliases: %w[delete rm]
      register '--version', Version, aliases: %w[-v]
    end
  end
end

Dry::CLI.new(ManageAlias::CLI::Commands).call
